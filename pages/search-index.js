var searchIndex = JSON.parse('{\
"cardputer":{"doc":"Utilities for M5Stack Cardputer","t":"AAAADLLLLLLLLLLLLLLLLLLLLLLRRFFNNNNNNNNNDNNNNNNNNNNNNNNNNNNEEDIDNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["backlight","display","grove","keyboard","Backlight","az","borrow","borrow_mut","cast_from","checked_as","checked_cast_from","from","into","new","off","on","overflowing_as","overflowing_cast_from","saturating_as","saturating_cast_from","try_from","try_into","type_id","unwrapped_as","unwrapped_cast_from","wrapping_as","wrapping_cast_from","DISPLAY_SIZE_HEIGHT","DISPLAY_SIZE_WIDTH","build","build","A","B","Backquote","Backslash","Backspace","Backspace","C","CloseSquareBracket","Comma","ConversionRule","D","Delete","DownCursor","E","Eight","Enter","Enter","Equal","Escape","F","Five","Four","G","Graph","H","I","J","K","KeyImprint","KeyType","Keyboard","KeyboardScanner","KeyboardState","L","LeftAlt","LeftCtrl","LeftCursor","LeftFn","LeftOpt","LeftShift","M","Minus","Modified","Modifier","N","Nine","Normal","O","One","OpenSquareBracket","P","Period","Q","Quote","R","RightCursor","S","SemiColon","Seven","Six","Slash","Space","Space","T","Tab","Tab","Three","Two","U","UpCursor","V","W","X","Y","Z","Zero","az","az","az","az","az","az","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast_from","cast_from","cast_from","cast_from","cast_from","cast_from","checked_as","checked_as","checked_as","checked_as","checked_as","checked_as","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","checked_cast_from","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hold_keys","imprint","imprint","into","into","into","into","into","into","is_alt_pressed","is_ctrl_pressed","is_fn_pressed","is_shift_pressed","modified","new","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_as","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","overflowing_cast_from","pressed_keys","released_keys","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_as","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","saturating_cast_from","scan_pressed_keys","scan_pressed_keytypes","scan_pressed_keytypes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_as","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","unwrapped_cast_from","update","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_as","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from","wrapping_cast_from"],"q":[[0,"cardputer"],[4,"cardputer::backlight"],[27,"cardputer::display"],[30,"cardputer::grove"],[31,"cardputer::keyboard"]],"d":["LCD backlight controller","Create and initialize ST7789 display driver","Initialize I2C driver for Grove I/F","Keyboard scanner that converts the 74HC138 decoding results","Backlight controller","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new controller.","Turn off the backlight.","Turn on the backlight.","","","","","","","","","","","","Display height","Display width","Create and initialize display driver","","","","","","","","","","","Conversion rule","","","","","","","","","","","","","","","","","","","","Define the type of key as modifier key and normal key","Keyboard scanner for Cardputer","Keyboard scanner trait","Structure that scans the keyboard and keeps track of state …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the imprint of the key assigned to the rule","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Convert according to the state of Fn and Shift key","Create new scanner.","","","","","","","","","","","","","","","","","","","","","","","","","","","Scan the keyboard and return the Vector of KeyImprint.","Scan the keyboard and return the Vector of KeyType.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the latest key state and update the Pressed/Released …","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,18,18,18,18,18,19,18,18,18,0,18,19,19,18,18,18,19,18,19,18,18,18,18,19,18,18,18,18,0,0,0,0,0,18,18,18,19,18,18,18,18,18,0,21,18,18,21,18,18,18,18,18,18,18,18,19,18,18,18,18,18,18,19,18,18,19,18,18,18,19,18,18,18,18,18,18,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,18,19,20,21,18,19,20,21,22,18,19,20,18,19,20,21,22,27,18,19,20,21,22,22,20,21,27,18,19,20,21,22,22,22,22,22,20,27,27,18,19,20,21,22,27,18,19,20,21,22,22,22,27,18,19,20,21,22,27,18,19,20,21,22,27,28,27,18,19,20,21,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,27,18,19,20,21,22,22,27,18,19,20,21,22,27,18,19,20,21,22],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[2,[[4,[3]]]],[3,4],[3,4],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],6],[[]],[[]],[[]],[[]],0,0,[[2,2,2,2,2,2],[[4,[[15,[[12,[[8,[7]],[11,[9,10]]]],13,[11,[14,10]]]]]]]],[[2,2,2,16],[[4,[17]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[18,18],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[]],[[],22],[[18,18],23],[[19,19],23],[[20,20],23],[[18,24],25],[[19,24],25],[[20,24],25],[[21,24],25],[[22,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[22,[[26,[19]]]],[20,18],[21,18],[[]],[[]],[[]],[[]],[[]],[[]],[22,23],[22,23],[22,23],[22,23],[[20,23,23],19],[[2,2,2,2,2,2,2,2,2,2],[[4,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,[[26,[19]]]],[22,[[26,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[4,[[26,[18]]]]]],[[],[[4,[[26,[21]]]]]],[27,[[4,[[26,[21]]]]]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[22,28],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[4,"Option"],[8,"Peripheral"],[3,"Backlight"],[6,"Result"],[4,"Result"],[3,"TypeId"],[3,"SpiDriver"],[3,"SpiDeviceDriver"],[3,"Gpio34"],[3,"Output"],[3,"PinDriver"],[3,"SPIInterfaceNoCS"],[3,"ST7789"],[3,"Gpio33"],[3,"Display"],[3,"Hertz"],[3,"I2cDriver"],[4,"KeyImprint"],[4,"Modified"],[3,"ConversionRule"],[4,"KeyType"],[3,"KeyboardState"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Keyboard"],[8,"KeyboardScanner"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
